theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
coord_flip(),
ncol=3, nrow=1,
layout_matrix=t(c(1,1,2))
)
grid.arrange(
ggplot(train, aes(reorder(Gama, Price, median), Price)) +
geom_boxplot() +
scale_y_log10() +
coord_flip(),
ggplot(train, aes(reorder(Gama, Price, median))) +
geom_bar(stat="count") +
theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
coord_flip(),
ncol=3, nrow=1,
layout_matrix=t(c(1,1,2))
)
ggplot(train, aes(Location, Price))+geom_boxplot(aes(group=Location))+geom_jitter(alpha=0.1)+geom_smooth(method="loess")+scale_y_log10()
grid.arrange(
ggplot(train, aes(reorder(Location, Price, median), Price)) +
geom_boxplot() +
scale_y_log10() +
coord_flip(),
ggplot(train, aes(reorder(Location, Price, median))) +
geom_bar(stat="count") +
theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
coord_flip(),
ncol=3, nrow=1,
layout_matrix=t(c(1,1,2))
)
ggplot(train, aes(log(Kilometers_Driven), log(Price)))+
geom_boxplot(aes(group=Kilometers_Driven))+
geom_jitter(alpha=0.1)+
geom_smooth(method="loess")+
scale_y_log10()
plot(log(train$Kilometers_Driven), log(train$Price))
data.frame(log(train$Kilometers_Driven), log(train$Price)) %>%
chart.Correlation()
ggplot(train, aes(Fuel_Type, Price))+
geom_boxplot(aes(group=Fuel_Type))+
geom_jitter(alpha=0.1)+
geom_smooth(method="loess")+
scale_y_log10()
grid.arrange(
ggplot(train, aes(reorder(Fuel_Type, Price, median), Price)) +
geom_boxplot() +
scale_y_log10() +
coord_flip(),
ggplot(train, aes(reorder(Fuel_Type, Price, median))) +
geom_bar(stat="count") +
theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
coord_flip(),
ncol=3, nrow=1,
layout_matrix=t(c(1,1,2))
)
train %>% ggplot(aes(x=Fuel_Type, y=log(Kilometers_Driven), fill=Transmission)) +geom_boxplot()+ggtitle ("Km recorridos según el tipo de combustible por tipo de transmisión") +theme (plot.title = element_text(size=rel(1.25), vjust=2, face="bold", color="black"))
train %>% ggplot(aes(x=log(Kilometers_Driven), y=log(Price), fill=Fuel_Type)) +geom_boxplot()+ggtitle ("Precio según los km recorridos por tipo de combustible") +theme (plot.title = element_text(size=rel(1.25), vjust=2, face="bold", color="black"))
ggplot(train, aes(Transmission, Price))+
geom_boxplot(aes(group=Transmission))+
geom_jitter(alpha=0.1)+
geom_smooth(method="loess")+
scale_y_log10()
grid.arrange(
ggplot(train, aes(reorder(Transmission, Price, median), Price)) +
geom_boxplot() +
scale_y_log10() +
coord_flip(),
ggplot(train, aes(reorder(Transmission, Price, median))) +
geom_bar(stat="count") +
theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
coord_flip(),
ncol=3, nrow=1,
layout_matrix=t(c(1,1,2))
)
train %>% ggplot(aes(x=Fuel_Type, y=Price, fill=Transmission)) +geom_boxplot()+ggtitle ("Precio de los coches según el tipo de combustible por tipo de transmisión") +theme (plot.title = element_text(size=rel(1.25), vjust=2, face="bold", color="black"))
ggplot(train, aes(Owner_Type, Price))+geom_boxplot(aes(group=Owner_Type))+geom_jitter(alpha=0.1)+geom_smooth(method="loess")+scale_y_log10()
grid.arrange(
ggplot(train, aes(reorder(Owner_Type, Price, median), Price)) +
geom_boxplot() +
scale_y_log10() +
coord_flip(),
ggplot(train, aes(reorder(Owner_Type, Price, median))) +
geom_bar(stat="count") +
theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
coord_flip(),
ncol=3, nrow=1,
layout_matrix=t(c(1,1,2))
)
ggplot(train, aes(Engine, log(Price)))+
geom_boxplot(aes(group=Engine))+
geom_jitter(alpha=0.1)+
geom_smooth(method="loess")+
scale_y_log10()
data.frame(train$Engine, log(train$Price)) %>% chart.Correlation()
ggplot(train, aes(train$Power, train$Price))+
geom_boxplot(aes(group=train$Power))+
geom_jitter(alpha=0.1)+
geom_smooth(method="loess")+
scale_y_log10()
data.frame(train$Power, train$Price) %>% chart.Correlation()
ggplot(train, aes(train$Seats, train$Price))+
geom_boxplot(aes(group=train$Seats))+
geom_jitter(alpha=0.1)+
geom_smooth(method="loess")+
scale_y_log10()
grid.arrange(
ggplot(train, aes(reorder(train$Seats, train$Price, median), train$Price)) +
geom_boxplot() +
scale_y_log10() +
coord_flip(),
ggplot(train, aes(reorder(train$Seats, train$Price, median))) +
geom_bar(stat="count") +
theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
coord_flip(),
ncol=3, nrow=1,
layout_matrix=t(c(1,1,2))
)
ggplot(train, aes(train$kmpl, train$Price))+
geom_boxplot(aes(group=train$kmpl))+
geom_jitter(alpha=0.1)+
geom_smooth(method="loess")+
scale_y_log10()
data.frame(train$kmpl, log(train$Price)) %>% chart.Correlation()
ggplot(train, aes(log(train$kmpkg), log(train$Price)))+
geom_boxplot(aes(group=train$kmpkg))+
geom_jitter(alpha=0.1)+
geom_smooth(method="loess")+
scale_y_log10()
data.frame(log(train$kmpkg), log(train$Price)) %>% chart.Correlation()
plot(train$Engine,train$Power)
train %>% select(Price, Engine, Power) %>% mutate(Price=log10(Price)) %>% cor() %>% ggcorrplot(lab=TRUE)
cor(train[, c(3, 8, 9, 11)])
#Trabajos con las variables cuantitativas
reg.fit.selec=regsubsets(x=train[, c(3, 8, 9, 10)], y=train$Price)
reg.summary=summary(reg.fit.selec)
summary(reg.fit.selec)
#Estadisticos R^2:
reg.summary$rsq
#Estadisticos R^2 ajustado:
reg.summary$adjr2
par(mfrow=c(1,2))
plot(reg.summary$rss ,xlab="Numero de variables ",ylab="RSS",
type="l") #aqui usamos rss
plot(reg.summary$adjr2 ,xlab="Numero de variables ",
ylab="R2 ajustada",type="l")
num_var <- which.max(reg.summary$adjr2)
points(num_var,reg.summary$adjr2[num_var], col="red",cex=2,pch=20)
reg.summary$cp
plot(reg.summary$cp ,xlab="Numero de variables ",ylab="Cp",type="l")
num_var <- which.min(reg.summary$cp)
points(num_var,reg.summary$cp[num_var], col="red",cex=2,pch=20)
reg.summary$bic
plot(reg.summary$bic ,xlab="Numero de variables ",ylab="Bic",type="l")
num_var <- which.min(reg.summary$bic)
points(num_var,reg.summary$bic[num_var], col="red",cex=2,pch=20)
x=model.matrix(~Year+Transmission+Owner_Type+Engine+Power+Seats+Gama,data=train)
reg.fit.select=regsubsets(x[,-1], y=train$Price)
#Quitamos la intercptación que por defecto se construye en la matriz de diseño, ya que la funcion regsubsets tambien la incluye por defecto
reg.summary= summary(reg.fit.select)
reg.summary
reg.summary$adjr2
plot(reg.summary$adjr2 ,xlab="Numero de variables ", ylab="R2 ajustada",type="l")
num_var <- which.max(reg.summary$adjr2)
points(num_var,reg.summary$adjr2[num_var], col="red",cex=2,pch=20)
reg.summary$cp
plot(reg.summary$cp ,xlab="Numero de variables ",ylab="Cp",type="l")
var <- which.min(reg.summary$cp)
points(var,reg.summary$cp[var], col="red",cex=2,pch=20)
reg.summary$bic
plot(reg.summary$bic ,xlab="Numero de variables ",ylab="Bic",type="l")
var <- which.min(reg.summary$bic)
points(var,reg.summary$bic[var], col="red",cex=2,pch=20)
mod0=lm(log10(Price) ~ Year+Power,data=train) #2 variables
mod1=lm(log10(Price) ~ Year+Fuel_Type+Power,data=train) #2 variables +fuel_type
mod2=lm(log10(Price) ~ Year+Power+Gama,data=train) #3variables
mod3=lm(log10(Price) ~ Year+Fuel_Type+Power+Gama,data=train) #3 variables +fuel
mod4=lm(log10(Price) ~ Year+Power+Seats+Gama,data=train) #4 variables
mod5=lm(log10(Price) ~ Year+Fuel_Type+Power+Seats+Gama,data=train) #4 var + fuel_type
mod6=lm(log10(Price) ~ Year+ Transmission+Power+Seats+Gama,data=train) #5 var
mod7=lm(log10(Price) ~ Year+Fuel_Type+Transmission+Power+Seats+Gama,data=train) #5 var + fuel
mod8=lm(log10(Price) ~ Year+Transmission+Owner_Type+Power+Seats+Gama,data=train) #6var
mod9=lm(log10(Price) ~ Year+Fuel_Type+Transmission+Owner_Type+Power+Seats+Gama,data=train) #6var + fuel
mod10=lm(log10(Price) ~ Year+Transmission+Owner_Type+Power+Engine+Seats+Gama,data=train) #7var
mod11=lm(log10(Price) ~ Year+Fuel_Type+Transmission+Owner_Type+Power+Engine+Seats+Gama,data=train) #7var+fuel
compare_performance(mod0,mod1,mod2,mod3,mod4,mod5,mod6,mod7,mod8,mod9,mod10,mod11, rank=TRUE)
plot(compare_performance(mod0,mod1,mod2,mod3,mod4,mod5,mod6,mod7,mod8,mod9,mod10,mod11, rank=TRUE))
compare_performance(mod2,mod3,mod6,mod7,mod11, rank=TRUE)
plot(compare_performance(mod2,mod3,mod6,mod7,mod11, rank=TRUE))
summary(mod11)
mod11=lm(log10(Price) ~ Year+Fuel_Type+Transmission+Owner_Type+Power+Engine+Gama,data=train)
summary(mod11)
train %>% ggplot(aes(x= Power, y=Price)) +
geom_point()+
geom_smooth()
train %>% ggplot(aes(x= log(Power), y=log(Price))) +
geom_point()+
geom_smooth()
mod11=lm(log10(Price) ~ Year+Fuel_Type+Transmission+Owner_Type+log(Power)+Engine+Gama,data=train)
summary(mod11)
check_model(mod11)
plot(mod11)
dwtest(mod11, alternative = "two.sided")
vif(mod11)
summary(mod7)
mod7=lm(log10(Price) ~ Year+Fuel_Type+Transmission+log(Power)+Gama,data=train)
summary(mod7)
check_model(mod7)
plot(mod7)
dwtest(mod7, alternative = "two.sided")
vif(mod7)
summary(mod6)
mod6=lm(log10(Price) ~ Year+ Transmission+log(Power)+Seats+Gama,data=train)
summary(mod6)
mod6=lm(log10(Price) ~ Year+ Transmission+log(Power)+Gama,data=train)
summary(mod6)
check_model(mod6)
plot(mod6)
dwtest(mod6, alternative = "two.sided")
vif(mod6)
summary(mod3)
mod3=lm(log10(Price) ~ Year+Fuel_Type+log(Power)+Gama,data=train)
summary(mod3)
check_model(mod3)
plot(mod3)
dwtest(mod3, alternative = "two.sided")
vif(mod3)
summary(mod2)
mod2=lm(log10(Price) ~ Year+log(Power)+Gama,data=train)
summary(mod2)
check_model(mod2)
plot(mod2)
dwtest(mod2, alternative = "two.sided")
vif(mod2)
ols_coll_diag(mod2)
train$Price.mod2 <- mod2$fitted.values
plot(x = log(train$Price),                     # True values on x-axis
y = mod2$fitted.values,               # fitted values on y-axis
xlab = "True Values",
ylab = "Model Fitted Values",
main = "Regression fits")
ols_plot_diagnostics(mod2)
residuos=resid(mod2)
ks.test(residuos, 'pnorm')
stud.del.resids=rstudent(mod2)
range(stud.del.resids) #rango por defecto
n=length(train$Price)
alpha=0.005
valorcritico= qt(1-alpha/(2*n),df=n-3-1) #recordamos que p=k+1 es decir el numero de covariables+1
ols_plot_resid_stud_fit(mod2)
plot(hatvalues(mod2))
valorLimite = 2*3/n
valorLimite
#dffits(mod2)
ols_plot_dffits(mod2)
avPlots(mod2)
summary(mod2)
anova(mod2)
str_split(test$Name, " ", simplify=TRUE) %>% subset(select=1) %>% unique() -> car_makes
car_makes[car_makes=="Land"] <- "Land Rover" #Anomalía en los datos
car_makes_regex <- paste(car_makes, collapse="|")
str_extract(test$Name, car_makes_regex) -> make
test %>% mutate(Make = str_to_title(make)) -> test
test %>%
mutate(
Gama = case_when(
test$Make=="Datsun" |test$Make=="Smart" |test$Make=="Tata" |test$Make=="Fiat" |test$Make=="Chevrolet" |test$Make=="Ambassador" ~ "Gama baja",
test$Make=="Skoda"|test$Make=="Renault" |test$Make=="Ford" |test$Make=="Honda"|test$Make=="Volkswagen" |test$Make=="Hyundai" |test$Make=="Nissan" |test$Make=="Maruti" ~ "Gama media",
test$Make=="Bentley"|test$Make=="Porsche" |test$Make=="Land Rover" |test$Make=="Jaguar" |test$Make=="Mini" |test$Make=="Mercedes-Benz" |test$Make=="Audi" |test$Make=="Bmw" |test$Make=="Jeep" |test$Make=="Volvo" |test$Make=="Isuzu" |test$Make=="Mitsubishi" |test$Make=="Toyota" |test$Make=="Force" |test$Make=="Mahindra"~ "Gama alta"
)
) -> test
test$Gama <- as.factor(test$Gama)
test %>% select(-New_Price) -> test
test %>% select(-X) -> test
pred=predict(mod2,test[,-12])
tables=as.data.frame(cbind(Prediccion=exp(pred),Observ=log(test[,12]), Dif=exp(pred)-log(test[,12])))
summary(tables)
write.csv(test, "test-ML.csv")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
library(readr)
library(mice)
library(stringr)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(gmodels)
library(Hmisc)
library(ggthemes)
library(ellipse)
library(corrplot)
library(ggcorrplot)
library(corrplot)
library(leaps)
library(PerformanceAnalytics)
library(GGally)
library(psych)
library(carData)
library(car)
library(lmtest)
library(olsrr)
library(performance)
library(see)
library(lme4)
library(patchwork)
data <- read.csv("train-ML.csv", na = c("","NA","NULL",NULL,"  ","/n" ))
head(data)
dataTest <- read.csv("test-ML.csv", na = c("","NA","NULL",NULL,"  ","/n" ))
head(dataTest)
library(dplyr)
data %>% select(-Price.mod2) -> data
data %>% select(-X) -> data
head(data)
library(corrplot)
library()
str(data)
data
corrplot(cor(data[, c(3,4, 8, 9, 14, 15)]), method = "ellipse")
corPlot(data[, c(3,4, 8, 9, 14, 15)], cex = 1.2, main = "Matriz de correlación")
corrplot(cor(data[, c(3,4, 8, 9, 14, 15)]),method = "circle",       order = "hclust",         hclust.method = "ward.D",
addrect =2,rect.col = 3,rect.lwd = 3)
cortest(cor(data[, c(3,4, 8, 9, 14, 15)]))
pca1 <- prcomp(data[, c(3,4, 8, 9, 14, 15)])
plot(pca1)
summary(pca1)
pca2 <- prcomp(data[, c(3,4, 8, 9, 14, 15)], scale=T)
pca2
summary(pca2)
PC1= pca2[[2]][,1]
PC2= pca2[[2]][,2]
PC3= pca2[[2]][,3]
PC4= pca2[[2]][,4]
componentes_princ <- cbind(PC1,PC2,PC3,PC4)
componentes_princ
library(ade4)
plot(pca2)
biplot(pca2)
s.corcircle(componentes_princ[,-3], sub="PC1 Y PC2")
library(factoextra)
fviz_pca_var(pca2,axes = c(1,2), col.var = "cos2", alpha.var = "contrib" ) + theme_grey()
fviz_pca_var(pca2,axes = c(1,3), col.var = "cos2", alpha.var = "contrib" ) + theme_grey()
#fviz_pca_ind(pca2,axes=c(1,2), col.ind = train$Gama, alpha.ind = "contrib" ) + theme_grey()
#fviz_pca_ind( pca2,axes=c(1,2),  habillage = as.factor( train$Gama ), addEllipses = TRUE, ellipse.level = 0.99 )
#fviz_pca_ind( pca2, axes=c(1,2),col.ind = train$Make, alpha.ind = "contrib" ) + theme_grey()
#fviz_pca_ind( pca2, axes=c(1,2),col.ind = train$Fuel_Type, alpha.ind = "contrib" ) + theme_grey()
#fviz_pca_ind( pca2, axes=c(1,2),habillage = as.factor( train$Fuel_Type ), addEllipses = TRUE, ellipse.level = 0.99 )
#fviz_pca_ind( pca2, axes=c(1,2),col.ind = train$Transmission, alpha.ind = "contrib" ) + theme_grey()
#fviz_pca_ind( pca2, axes=c(1,2),habillage = as.factor( train$Transmission ), addEllipses = TRUE, ellipse.level = 0.99 )
#fviz_pca_ind( pca2,axes=c(1,2), col.ind = train$Location, alpha.ind = "contrib" ) + theme_grey()
#fviz_pca_biplot( pca2, axes=c(1,2),col.ind = train$Gama )
summary(pca2)
screeplot(pca2, xlab="PCs")
library(psych)
scree(data[, c(3,4, 8, 9, 14, 15)],main ="Grafico_de_Sedimentacion")
fa.parallel(data[, c(3,4, 8, 9, 14, 15)],fa="pc")
#library(FactoMineR)
#library(FactoInvestigate)
#res = PCA(train[, c(3,4, 8, 9, 14, 15)], graph=FALSE)
#Investigate(res)
data <- data[,-13]
data %>%
mutate(
Gama = case_when(
data$Make=="Datsun" |data$Make=="Smart" |data$Make=="Tata" |data$Make=="Fiat" |data$Make=="Chevrolet" |data$Make=="Ambassador" |
data$Make=="Skoda"|data$Make=="Renault" |data$Make=="Ford" |data$Make=="Honda"|data$Make=="Volkswagen" |data$Make=="Hyundai" |data$Make=="Nissan" |data$Make=="Maruti" ~ "Gama baja-media",
data$Make=="Bentley"|data$Make=="Porsche" |data$Make=="Land Rover" |data$Make=="Jaguar" |data$Make=="Mini" |data$Make=="Mercedes-Benz" |data$Make=="Audi" |data$Make=="Bmw" |data$Make=="Jeep" |data$Make=="Volvo" |data$Make=="Isuzu" |data$Make=="Mitsubishi" |data$Make=="Toyota" |data$Make=="Force" |data$Make=="Mahindra"~ "Gama alta"
)
) -> data
data$Gama <- as.factor(data$Gama)
table(data$Gama)
ggplot(data, aes(x = Power, y = Price, color = Gama)) + geom_point()
ggplot(data, aes(x = Engine, y = Price, color = Gama)) + geom_point()
ggplot(data, aes(x = Transmission, y = Price, color = Gama)) + geom_point()
ggplot(data, aes(x = Seats, y = Price, color = Gama)) + geom_point()
ggplot(data, aes(x = Owner_Type, y = Price, color = Gama)) + geom_point()
# modelos lineales generalizados estimados por MLE
logit <- glm(
Gama ~Power+Seats+Transmission+Owner_Type+Engine,
data = data,
family = binomial()
)
summary(logit)
logit2 <- glm(
Gama ~Owner_Type+Seats+Transmission+Engine,
data = data,
family = binomial()
)
summary(logit2)
logit3 <- glm(
Gama ~Power+Seats+Transmission+Engine,
data = data,
family = binomial()
)
summary(logit3)
TrainEscalado <- data %>% select(Year, Kilometers_Driven, Engine, Power, Price, kmpl) %>% scale() %>% as.data.frame()
#data[, c(3,4, 8, 9, 11,13)]
library(NbClust)
set.seed(220322)
nc = NbClust(TrainEscalado,min.nc=2,max.nc=10,method = "kmeans")
nc
# Ponemos una semilla para obtener siempre los mismos 3 grupos
set.seed(20112090)
km0 = kmeans(x=TrainEscalado, nstart = 5, centers = 3)
km0$centers #km2$[2]
tkm0 <- table(km0$cluster,data$Gama)
tkm0
# Ponemos una semilla para obtener siempre los mismos 4 grupos
set.seed(22032023)
km1 = kmeans(x=TrainEscalado, nstart = 5, centers = 4)
km1$centers #km1$[2]
tkm1 <- table(km1$cluster,data$Gama)
tkm1
# Ponemos una semilla para obtener siempre los mismos 8 grupos
set.seed(20112020)
km2 = kmeans(x=TrainEscalado, nstart = 5, centers = 8)
km2$centers #km2$[2]
table(km2$cluster,data$Gama)
# Ponemos una semilla para obtener siempre los mismos 8 grupos
set.seed(201120572)
km3 = kmeans(x=TrainEscalado, nstart = 5, centers = 9)
km3$centers #km2$[2]
table(km3$cluster,data$Gama)
max(data$Year)
min(data$Year)
plot(TrainEscalado$Engine, TrainEscalado$Price, col=km0$cluster, pch=19 , cex=2, xlab = "Engine", ylab="Price", main = "Engine vs Price")
legend(-2,12,c("Cluster 1","Cluster 2","Cluster 3"),fill = (unique(sort(km0$cluster))))
hc1 = hclust(d=dist(TrainEscalado), method = "single" )
plot(hc1)
hc2 = hclust(d=dist(TrainEscalado), method = "complete")
plot(hc2)
hc3 = hclust(d=dist(TrainEscalado), method = "average" )
plot(hc3)
hc4 = hclust(d=dist(TrainEscalado), method = "centroid" )
plot(hc4)
plot(hc2)
rect.hclust(hc2, k=4, border = "blue")
plot(hc2)
rect.hclust(hc2, k=10, border = "blue")
summary(data$Gama)
medidaPrecision <- function(matrizDeConfusion){
return(sqrt(matrizDeConfusion[1,1]*matrizDeConfusion[2,2]/((matrizDeConfusion[1,2]+matrizDeConfusion[2,2])*(matrizDeConfusion[2,1]+matrizDeConfusion[1,1]))))
}
#Referencia de: Silverman, B.W. Density Estimation for Statistics and Data Analysis; Chapman and Hall: Washington, DC, USA, 1990.
dim(data)[1]
dim(data)[2]
dim(data)[1]^(4/dim(data)[2]+4)
View(dataTest)
#dataTest %>% select(-Price.mod2) -> dataTest
dataTest %>% select(-X) -> dataTest
head(dataTest)
View(dataTest)
View(data)
View(dataTest)
# Calculamos con un bucle las precisiones de modelos con 1, 2, 3, ..., 50 vecinos
precisionesknn <- array(0,50)
for (i in 1:50){
prediccion_knni= knn(data[,1:14], dataTest[,1:13], k=i , cl=Gama)
ti = table(prediccion_knni, dataTest$Gama)
precisioni = medidaPrecision(ti)
precisionesknn[i] = precisioni
}
# Calculamos con un bucle las precisiones de modelos con 1, 2, 3, ..., 50 vecinos
library(caret)
install.packages("caret")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Calculamos con un bucle las precisiones de modelos con 1, 2, 3, ..., 50 vecinos
library(caret)
# Calculamos con un bucle las precisiones de modelos con 1, 2, 3, ..., 50 vecinos
library(caret)
library(ggplot2)
library(lattice)
precisionesknn <- array(0,50)
for (i in 1:50){
prediccion_knni= knn(data[,1:14], dataTest[,1:13], k=i , cl=Gama)
ti = table(prediccion_knni, dataTest$Gama)
precisioni = medidaPrecision(ti)
precisionesknn[i] = precisioni
}
library(class)
# Calculamos con un bucle las precisiones de modelos con 1, 2, 3, ..., 50 vecinos
library(caret)
library(ggplot2)
library(lattice)
library(class)
precisionesknn <- array(0,50)
for (i in 1:50){
prediccion_knni= knn(data[,1:14], dataTest[,1:13], k=i , cl=Gama)
ti = table(prediccion_knni, dataTest$Gama)
precisioni = medidaPrecision(ti)
precisionesknn[i] = precisioni
}
dataTest %>% drop_na() -> dataTest
library(dplyr)
dataTest %>% drop_na() -> dataTest
dataTest %>% drop_na() -> dataTest
dataTest %>% drop_na(dataTest) -> dataTest
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
dataTest %>% drop_na() -> dataTest
dataTest%>%drop_na() -> dataTest
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
